@using TransmissionManager.Api.Common.Dto.Torrents
@using TransmissionManager.Web.Services

<div class="item-card">
    <h3>@Torrent.Name</h3>
    <p class="text-secondary">Refreshed on: @Torrent.RefreshDate.ToString("yyyy-MM-dd HH:mm:ss zzz")</p>

    <a class="item-button" target="_blank" href="@Torrent.WebPageUri">
        <img src="img/visit.svg" alt="Go to torrent page" title="Go to torrent page" />
    </a>

    <button class="item-button" disabled="@_isRefreshDisabled" @onclick="RefreshTorrentsAsync">
        <img src="img/restart.svg" alt="Refresh" title="Refresh" />
    </button>

    <button class="item-button" disabled="@_isDeleteDisabled" @onclick="DeleteTorrentAndDataAsync">
        <img src="img/bin.svg" alt="Remove" title="Remove" />
    </button>
</div>

@code {
    private bool _isRefreshDisabled = false;
    private bool _isDeleteDisabled = false;

    [Parameter, EditorRequired]
    public TorrentDto Torrent { get; set; }

    [Parameter, EditorRequired]
    public Func<long, Task> RefreshAsync { get; set; }

    [Parameter, EditorRequired]
    public Func<long, Task> DeleteAsync { get; set; }

    private async Task RefreshTorrentsAsync()
    {
        _isRefreshDisabled = true;
        try
        {
            await RefreshAsync(Torrent.Id);
            await Task.Delay(TimeSpan.FromSeconds(3));
        }
        finally
        {
            _isRefreshDisabled = false;
        }
    }

    private async Task DeleteTorrentAndDataAsync()
    {
        _isDeleteDisabled = true;
        try
        {
            await DeleteAsync(Torrent.Id);
        }
        finally
        {
            _isDeleteDisabled = false;
        }
    }
}
