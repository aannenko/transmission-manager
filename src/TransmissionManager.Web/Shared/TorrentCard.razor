@using TransmissionManager.Api.Common.Dto.Torrents
@using TransmissionManager.Web.Extensions
@using TransmissionManager.Web.Services

<div class="item-card">
    <h4 class="text-header">@Torrent.Name</h4>
    <p class="text-secondary">Refreshed on: @Torrent.RefreshDate.ToServerTimeString()</p>

    <a class="item-button" target="_blank" href="@Torrent.WebPageUri">
        <img src="img/visit.svg" alt="Go to torrent page" title="Go to torrent page" />
    </a>

    <button class="item-button" type="button" disabled="@_isRefreshDisabled" @onclick="RefreshTorrentsAsync">
        <img src="img/restart.svg" alt="Refresh" title="Refresh" />
    </button>

    <div class="dropdown">
        <button class="item-button" type="button" disabled="@_isDeleteDisabled">
            <img src="img/bin.svg" alt="Remove" title="Remove" />
        </button>
        <div class="dropdown-content">
            <a @onclick="DeleteLocalTorrentAsync">Delete record</a>
            <a @onclick="DeleteLocalAndTransmissionTorrentAsync">...and torrent</a>
            <a @onclick="DeleteTorrentAndDataAsync">...and data</a>
        </div>
    </div>
</div>

@code {
    private bool _isRefreshDisabled = false;
    private bool _isDeleteDisabled = false;

    [Parameter, EditorRequired]
    public TorrentDto Torrent { get; set; }

    [Parameter, EditorRequired]
    public Func<long, Task> RefreshAsync { get; set; }

    [Parameter, EditorRequired]
    public Func<long, DeleteTorrentByIdType, Task> DeleteAsync { get; set; }

    private async Task RefreshTorrentsAsync()
    {
        if (_isRefreshDisabled)
            return;

        _isRefreshDisabled = true;
        _isDeleteDisabled = true;
        try
        {
            await RefreshAsync(Torrent.Id);
            _isDeleteDisabled = false;
            StateHasChanged();
            await Task.Delay(TimeSpan.FromSeconds(10));
        }
        finally
        {
            _isRefreshDisabled = false;
            _isDeleteDisabled = false;
        }
    }

    private Task DeleteLocalTorrentAsync() =>
        DeleteTorrentAsync(DeleteTorrentByIdType.Local);

    private Task DeleteLocalAndTransmissionTorrentAsync() =>
        DeleteTorrentAsync(DeleteTorrentByIdType.LocalAndTransmission);

    private Task DeleteTorrentAndDataAsync() =>
        DeleteTorrentAsync(DeleteTorrentByIdType.LocalAndTransmissionAndData);

    private async Task DeleteTorrentAsync(DeleteTorrentByIdType deleteType)
    {
        if (_isDeleteDisabled)
            return;

        _isDeleteDisabled = true;
        try
        {
            await DeleteAsync(Torrent.Id, deleteType);
        }
        finally
        {
            _isDeleteDisabled = false;
        }
    }
}
