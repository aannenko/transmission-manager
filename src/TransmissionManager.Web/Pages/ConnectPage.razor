@page "/connect"
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics.CodeAnalysis
@using TransmissionManager.Api.Common.Serialization
@using TransmissionManager.Web.Components
@using TransmissionManager.Web.Extensions
@using TransmissionManager.Web.Services
@using TransmissionManager.Web.Validation
@inherits CommonComponentBase
@inject ConnectionService ConnectionService

<PageTitle>Transmission Manager - Connect</PageTitle>

<div class="item-card">
    <h4 class="text-block">Connect to Transmission Manager</h4>

    <EditForm Model="this" OnValidSubmit="ConnectAsync">
        <DataAnnotationsValidator />

        <div>
            <label for="host">Host:</label>
            <InputText id="host" class="form-input" disabled="@IsBusy" @bind-Value="Host" />
            <ValidationMessage For="@(() => Host)" />
        </div>

        <div>
            <label for="port">Port:</label>
            <InputNumber id="port" class="form-input" disabled="@IsBusy" @bind-Value="Port" />
            <ValidationMessage For="@(() => Port)" />
        </div>

        <button class="form-button" type="submit" disabled="@IsBusy">Connect</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p class="text-block">@Message</p>
    }
</div>

@code {
    private protected override string BusyMessage => "Connecting...";

    [Required, HostName]
    public string Host { get; private set; } = string.Empty;

    [Required, Range(0, 65535)]
    public int Port { get; private set; } = 9092;

    protected override void OnInitialized()
    {
        Host = ConnectionService.BaseAddress.Host;
        Port = ConnectionService.BaseAddress.Port;
    }

    private protected override string GetOperationCanceledMessage(OperationCanceledException exception) =>
        $"Connection attempt timed out. Please check the {nameof(Host)} and {nameof(Port)}.";

    private async Task ConnectAsync()
    {
        if (IsBusy)
            return;

        Uri baseAddress;
        try
        {
            baseAddress = new UriBuilder("http", Host, Port).Uri;
        }
        catch (UriFormatException e)
        {
            Message = e.Message;
            return;
        }

        var appVersion = await CallService(
            (ConnectionService, baseAddress),
            static args => args.ConnectionService.ConnectAsync(args.baseAddress));

        if (appVersion is not null)
        {
            Message = $"Connected to {baseAddress} | Version: {appVersion} ";
        }
        else if (string.IsNullOrEmpty(Message))
        {
            Message = $"Failed to connect. Please check the {nameof(Host)} and {nameof(Port)}.";
        }
    }
}
