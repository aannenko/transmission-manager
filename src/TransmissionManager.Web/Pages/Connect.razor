@page "/connect"
@inject IHttpClientFactory HttpClientFactory
@inject TransmissionManagerBaseAddressProvider BaseAddressProvider
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics.CodeAnalysis
@using TransmissionManager.Api.Common.Dto.AppInfo
@using TransmissionManager.Api.Common.Serialization
@using TransmissionManager.Web.Services
@using TransmissionManager.Web.Validation

<PageTitle>Transmission Manager - Connect</PageTitle>

<div class="item-card">
    <h4 class="text-header">Connect to Transmission Manager</h4>
    <EditForm Model="this" OnValidSubmit="ConnectAsync">
        <DataAnnotationsValidator />

        <div>
            <label for="host">Host:</label>
            <InputText id="host" class="form-input" @bind-Value="Host" />
            <ValidationMessage For="@(() => Host)" />
        </div>

        <div>
            <label for="port">Port:</label>
            <InputNumber id="port" class="form-input" @bind-Value="Port" />
            <ValidationMessage For="@(() => Port)" />
        </div>

        <button class="form-button" type="submit" disabled="@IsConnecting">Connect</button>

        @if (IsConnecting)
        {
            <p>Connecting...</p>
        }
        else
        {
            <p>@_connectionMessage</p>
        }
    </EditForm>
</div>

@code {
    private enum ConnectionStatus
    {
        Connecting,
        Connected,
        Error
    }

    private ConnectionStatus _connectionStatus = ConnectionStatus.Error;
    private string _connectionMessage = string.Empty;

    [Required, HostName]
    public string Host { get; set; } = string.Empty;

    [Required, Range(0, 65535)]
    public int Port { get; set; } = 9093;

    private bool IsConnecting => _connectionStatus is ConnectionStatus.Connecting;

    protected override void OnInitialized()
    {
        Host = BaseAddressProvider.BaseAddress.Host;
        Port = BaseAddressProvider.BaseAddress.Port;
    }

    private async Task ConnectAsync()
    {
        Uri baseAddress;
        try
        {
            baseAddress = new UriBuilder("https", Host, Port).Uri;
        }
        catch (UriFormatException e)
        {
            _connectionMessage = e.Message;
            _connectionStatus = ConnectionStatus.Error;
            return;
        }

        var httpClient = HttpClientFactory.CreateClient(nameof(TransmissionManagerClient));
        httpClient.BaseAddress = baseAddress;
        var transmissionManagerClient = new TransmissionManagerClient(httpClient, DtoJsonSerializerContext.Default);
        _connectionMessage = string.Empty;
        _connectionStatus = ConnectionStatus.Connecting;

        GetAppInfoResponse appInfo = default;
        try
        {
            using var cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(1));
            appInfo = await transmissionManagerClient.GetAppInfoAsync(cancellationTokenSource.Token);
        }
        catch (HttpRequestException e)
        {
            _connectionMessage = e.Message;
        }
        catch (OperationCanceledException)
        {
            _connectionMessage = $"Connection attempt timed out. Please check the {nameof(Host)} and {nameof(Port)}.";
        }
        catch (Exception e)
        {
            _connectionMessage = e.Message;
        }

        if (appInfo == default)
        {
            if (string.IsNullOrEmpty(_connectionMessage))
                _connectionMessage = $"Failed to connect. Please check the {nameof(Host)} and {nameof(Port)}.";

            _connectionStatus = ConnectionStatus.Error;
            return;
        }

        BaseAddressProvider.BaseAddress = baseAddress;

        _connectionMessage = $"Connected to {baseAddress} " +
            $"| Version: {appInfo.Version} " +
            $"| Local time: {appInfo.LocalTime.ToString("yyyy-MM-dd HH:mm:ss zzz")}";

        _connectionStatus = ConnectionStatus.Connected;
    }
}
