@page "/"
@page "/torrents"
@using System.Globalization
@using TransmissionManager.Api.Common.Dto.Torrents
@using TransmissionManager.Api.Common.Dto.Transmission
@using TransmissionManager.Web.Components
@using TransmissionManager.Web.Constants
@using TransmissionManager.Web.Services
@inherits CommonComponentBase
@inject TransmissionManagerClient Client

<PageTitle>Transmission Manager - Torrents</PageTitle>

@if (_torrents.Length is 0)
{
    <p>@Message</p>
    @if (!string.IsNullOrEmpty(_suggestedAddress))
    {
        <a href="@_suggestedAddress">@_suggestedAction</a>
    }
}
else
{
    <Virtualize @ref="_virtualize" TItem="TorrentDto" Items="_torrents" Context="torrent">
        <ItemContent>
            <TorrentCard Torrent="torrent" RefreshAsync="RefreshTorrentsAsync" DeleteAsync="DeleteTorrentAsync" />
        </ItemContent>
    </Virtualize>
}

@code
{
    private Virtualize<TorrentDto> _virtualize = null!;
    private TorrentDto[] _torrents = [];

    private string _suggestedAddress = string.Empty;
    private string _suggestedAction = string.Empty;

    private protected override string BusyMessage => "Loading torrents...";

    protected override Task OnInitializedAsync() => LoadTorrentsAsync();

    private async Task LoadTorrentsAsync()
    {
        if (IsBusy)
            return;

        _suggestedAddress = string.Empty;
        _suggestedAction = string.Empty;

        var torrentPage = await CallService(
            Client,
            static (client) => client.GetTorrentPageAsync(new()
            {
                Take = 1000,
                OrderBy = GetTorrentPageOrder.RefreshDateDesc
            }));

        if (torrentPage is not null)
        {
            _torrents = torrentPage.Torrents as TorrentDto[] ?? torrentPage.Torrents.ToArray();

            if (_torrents.Length is 0)
            {
                Message = "No torrents found.";
                _suggestedAddress = PageAddresses.AddTorrent;
                _suggestedAction = "Add a torrent";
            }
            else
            {
                Message = string.Empty;
            }
        }
        else
        {
            _suggestedAddress = PageAddresses.Connect;
            _suggestedAction = "Connect to Transmission Manager";
        }
    }

    private async Task RefreshTorrentsAsync(long id)
    {
        var response = await Client.RefreshTorrentByIdAsync(id);
        if (response.TransmissionResult is TransmissionAddResult.Added)
        {
            await LoadTorrentsAsync();
            StateHasChanged();
        }
    }

    private async Task DeleteTorrentAsync(long id, DeleteTorrentByIdType deleteType)
    {
        await Client.DeleteTorrentByIdAsync(id, deleteType);
        await LoadTorrentsAsync();
        StateHasChanged();
    }
}
